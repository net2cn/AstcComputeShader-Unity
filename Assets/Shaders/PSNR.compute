// Each #kernel tells which function to compile; you can have many kernels
//#pragma kernel Diff
#pragma kernel OnePassPsnr

Texture2D OriginalTexture;
Texture2D CompareTexture;

int InTexelWidth;
int InTexelHeight;

// psnr one pass
#define THREAD_NUM 512
#define REDUCTION_FUNC(src, idA, idB)  (src[idA] + src[idB])

bool FirstStep;
uint ThreadCount;

RWStructuredBuffer<float4> OutBuffer;
groupshared float4 SharedMem[THREAD_NUM];

[numthreads(THREAD_NUM, 1, 1)]
void OnePassPsnr(uint tid : SV_DispatchThreadID, uint gid : SV_GroupID, uint index : SV_GroupIndex)
{
    // divide and conquer, calculate mse over each pixel on the first step
    if (FirstStep)
    {
        uint2 texPosA = uint2((tid * 2) % InTexelWidth, (tid * 2) / InTexelHeight);
        uint2 texPosB = uint2((tid * 2 + 1) % InTexelWidth, (tid * 2 + 1) / InTexelHeight);
        float4 diffA = OriginalTexture[texPosA] - CompareTexture[texPosA];
        float4 diffB = OriginalTexture[texPosB] - CompareTexture[texPosB];
        SharedMem[index] = diffA * diffA + diffB * diffB;
    }
    else
    {
        SharedMem[index] = REDUCTION_FUNC(OutBuffer, tid * 2, tid * 2 + 1);
    }
    GroupMemoryBarrierWithGroupSync();
    
    [unroll(THREAD_NUM)]
    for (uint s = ThreadCount / 2; s > 0; s >>= 1)
    {
        if (index < s)
        {
            SharedMem[index] = REDUCTION_FUNC(SharedMem, index, index + s);
        }
        
        GroupMemoryBarrierWithGroupSync();
    }
    
    if (index < 1)
    {
        OutBuffer[gid] = SharedMem[0];
    }
}
